import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import warnings
import streamlit as st
import altair as alt


# header title
st.title('Deploying Time Series Predictive Model of Bike Sharing Demand Dataset using Streamlit')
st.subheader('An Application Development Exercise by Leo Karlo C. dela Cruz')

# add image
from PIL import Image
image = Image.open("img/bike_station.jpg")
st.image(image)

# add readme email of the aout the bike sharing dataset
st.markdown('Bike sharing systems are new generation of traditional bike rentals where whole process from membership, rental and return back has become automatic. Through these systems, user is able to easily rent a bike from a particular position and return back at another position. Currently, there are about over 500 bike-sharing programs around the world which is composed of over 500 thousands bicycles. Today, there exists great interest in these systems due to their important role in traffic, environmental and health issues.')
st.markdown('Apart from interesting real world applications of bike sharing systems, the characteristics of data being generated by these systems make them attractive for the research. Opposed to other transport services such as bus or subway, the duration of travel, departure and arrival position is explicitly recorded in these systems. This feature turns bike sharing system into a virtual sensor network that can be used for sensing mobility in the city. Hence, it is expected that most of important events in the city could be detected via monitoring these data.')

# about data 
st.markdown('### Data')
st.markdown('The core data set is related to the two-year historical log corresponding to years 2011 and 2012 from Capital Bikeshare system, Washington D.C., USA which is publicly available in http://capitalbikeshare.com/system-data. I aggregated the data on a weekly basis and the corresponding weather and seasonal information were removed from the original data. ') 
st.markdown('- dteday : start date of the week')
st.markdown('- yr : year (0: 2011, 1:2012)')
st.markdown('- mnth : month ( 1 to 12)')
st.markdown('- cnt: count of total rental bikes including both casual and register')

@st.cache
def fetch_data():
	df = pd.read_csv("week.csv", parse_dates=['dteday'], index_col = 'dteday')
	return df
data = fetch_data()
st.dataframe(data)

# time series information
st.markdown('### Weekly Bike Sharing Demand Chart')
fig, ax = plt.subplots(figsize=(15,5))
ax = sns.lineplot(x="dteday", y="cnt", color = "black", data=data)
ax.set_title('Weekly Rent Count Jan 2011 to Dec 2012')
ax.set_xlabel('Date')
ax.set_ylabel('Count')
st.pyplot(fig)

ts = data.copy()

# time series decomposition
st.markdown('### Decompose time Series into Trend, Seasonality, and Residuals')
from statsmodels.tsa.seasonal import seasonal_decompose
result = seasonal_decompose(ts['cnt'], model = "additive", freq = 52) # linear growth; freq = 365; yearly (requires 2 cycles)
from pylab import rcParams
rcParams['figure.figsize'] = 8, 7
decomposition = result
fig = decomposition.plot()
st.pyplot(fig)

# Forecasting Model 
st.markdown('### Forecasting Model: Autoregressive Integrated Moving Average')
st.markdown('**Best Parameters**')
st.markdown('- Order: (p =1, d = 0, q = 0)')
st.markdown('- Seasonal Order: (p =0, d = 1, q = 0), 52 (weeks)')

import pickle
# load model
#@st.cache
#def fetch_model():
#	mod = pickle.load(open("arima_model.pickle", "rb"))
#	res = model.fit()
#	return mod, res
#model, results = fetch_model()

@st.cache(allow_output_mutation=True)
def fetch_model():
	mod = pickle.load(open("arima_model.pickle", "rb"))
	res = mod.fit()
	ts_arima = res.predict(start = 1, end = len(ts))

	return mod, res, ts_arima
model, results, ts_arima = fetch_model()
#model = pickle.load(open("arima_model.pickle", "rb"))
#results = model.fit()
#ts['ARIMA'] = results.predict(start = 1, end = len(ts))
ts['ARIMA'] = ts_arima
	

fig, ax = plt.subplots(figsize=(10,5))
ax = sns.lineplot(x="dteday", y="cnt", color = "black", data=ts, label = "Actual")
ax = sns.lineplot(x="dteday", y="ARIMA", color = "blue", data=ts, label = "ARIMA")
ax.set_title('ARIMA (1,0,0) (0,1,0)[52] Forecast')
ax.set_xlabel('Date')
ax.set_ylabel('Count')
st.pyplot(fig)
st.markdown('Note: 2 years worth of data is used to create the model. The model requires 2 cycles')

# Forecasting Model 
st.markdown('### Interactive Widgets: Predict Demand for N Weeks in 2013')
nweeks = st.slider("", min_value=0, max_value=52)
st.text("{} Weeks".format(nweeks))
pred = results.predict(start = len(ts), end = len(ts) + nweeks)
st.line_chart(pred)